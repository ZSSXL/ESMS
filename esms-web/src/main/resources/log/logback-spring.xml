<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="true">
    <contextName>logback</contextName>
    <!-- 定义参数，后面可以通过${app.name}使用 -->
    <property name="app_name" value="esms_web"/>
    <property name="log_home" value="../data/dist/log/${app_name}"/>
    <property name="pattern" value="%d [%thread] %-5level %logger{36} [%file : %line] -%msg%n"/>
    <!-- ConsoleAppender 用于在屏幕上输入日志 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 这里定义了一个过滤器，在LEVEL之下得日志输出不会被打印出来 -->
        <!-- 这里定义了INFO,也就是控制台不会输出比INFO级别小的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <!-- encoder 默认配置为PatternLayoutEncoder -->
        <!-- 定义控制台输出格式 -->
        <encoder>
            <charset>utf-8</charset>
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 定义日志输出路径 -->
        <file>${log_home}/${app.name}.%i.log</file>
        <append>true</append>
        <!-- 定义日志滚动的策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名（切片后文件名）-->
            <fileNamePattern>${log_home}/${app_name}.%d{yyyy-MM-dd.HH}.%i.log.gz</fileNamePattern>
            <maxHistory>30</maxHistory>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
            <maxFileSize>20MB</maxFileSize>
        </rollingPolicy>
        <encoder>
            <charset>utf-8</charset>
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <!-- root是默认的logger 这里设定输出级别是INFO -->
    <root lever="info">
        <!-- 定义了两个appender,日志会通常往这两个appender里面写 -->
        <appender-ref ref="stdout"/>
        <appender-ref ref="file"/>
    </root>

    <!-- 对于类路径以 com.exmaple.logback 开头的Logger，输出级别为WARN,并且只输出到控制台 -->
    <logger name="com.example.logback" level="WARN"/>

    <!-- 通过LoggerFactory.getLogger("myTest") 可以获得这个Logger -->
    <!-- 由于这个Logger自动继承root的appender，root中已经有stdout的appender了，自己这边又引入stduot的appender -->
    <!-- 如果没有设置 additivity="false"，就会导致一条日志在控制台输出两次的情况 -->
    <!-- addtivity表示要不要使用rootLogger配置的appender进行输出 -->
    <logger name="esmsLog" level="info" addtivity="false">
        <appender-ref ref="stdout"/>
    </logger>
</configuration>